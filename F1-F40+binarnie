#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

vector<long long> fibonacci_sequence(int n) {
    vector<long long> fibonacci_numbers = {1, 1};
    for (int i = 2; i < n; i++) {
        fibonacci_numbers.push_back(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2]);
    }
    return fibonacci_numbers;
}

string to_binary_with_padding(long long number, int length) {
    string binary = "";
    while (number > 0) {
        binary = (number % 2 == 0 ? "0" : "1") + binary;
        number /= 2;
    }
    while (binary.length() < length) {
        binary = "0" + binary;
    }
    return binary;
}

int main() {
    int n = 40;
    vector<long long> fibonacci_40 = fibonacci_sequence(n);

    long long max_number = *max_element(fibonacci_40.begin(), fibonacci_40.end());
    int max_binary_length = 0;

    while (max_number > 0) {
        max_number /= 2;
        max_binary_length++;
    }

    vector<string> binary_fibonacci;
    for (long long number : fibonacci_40) {
        binary_fibonacci.push_back(to_binary_with_padding(number, max_binary_length));
    }

    for (const string& binary : binary_fibonacci) {
        cout << binary << endl;
    }

    return 0;
}
